/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package plurker.ui.notify;

import javax.swing.JComponent;
import plurker.ui.NotifyPanel;
import plurker.ui.util.GUIUtil;

/**
 *
 * @author SkyforceShen
 */
public class NotificationsFrame extends javax.swing.JFrame {

    /**
     * Creates new form NotificationsFrame
     */
    public NotificationsFrame() {
        initComponents();
    }
//    private PlurkPool plurkPool;
//
//    public void setPlurkPool(PlurkPool plurkPool) {
//        if (null == plurkPool) {
//            this.plurkPool = plurkPool;
//            plurkPool.addCometChangeListener(new NewChangeListener());
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(300, 475));

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jPanel1);

        jTabbedPane1.addTab("所有更新", jScrollPane1);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(jPanel2);

        jTabbedPane1.addTab("追蹤中", jScrollPane2);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        GUIUtil.initGUI();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NotificationsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NotificationsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NotificationsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NotificationsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotificationsFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    public void addToAll(NotifyPanel notify) {
        int width = jPanel1.getWidth();
        int contentHeight = getContentHeight(notify, width);
        notify.setSize(width, contentHeight);
        jPanel1.add(notify);
    }
    
    private static int getContentHeight(NotifyPanel notify, int width) {
//        TinyNotificationPanel tmppanel = new TinyNotificationPanel(component);
//        tmppanel.setSize(width, Short.MAX_VALUE);
//        return tmppanel.getPreferredSize().height;
        notify.setSize(width, Short.MAX_VALUE);
        return notify.getPreferredSize().height;
    }
    
    public void addToFollow(NotifyPanel notify) {
        jPanel2.add(notify);
    }
//    private class NewChangeListener implements ChangeListener {
//
//        @Override
//        public void stateChanged(ChangeEvent e) {
//            TreeSet<Plurk> newPlurkSet = plurkPool.getStackPlurkSet();
//            TreeSet<Comment> newResponseSet = plurkPool.getStackResponseSet();
//
////            if (displayMessage) {
////                int plurksize = newPlurkSet.size();
////                int responsesize = newResponseSet.size();
////                String message = "有" + ((plurksize != 0) ? plurksize + "則新噗" : "") + " " + ((responsesize != 0) ? responsesize + "則回應" : "");
////                trayicon.displayMessage(null, message, TrayIcon.MessageType.INFO);
////            }
//
//            for (Plurk plurk : newPlurkSet) {
//                NotifyPanel notify = new NotifyPanel(plurk, plurkPool);
//                notify.updateWidth(NotificationManager.NotifyWidth);
////                notify.setPlurker(plurker);
////                if (displayTinyWindow) {
////                    notifyManager.addToTinyWindow(notify);
////                }
////                if (displayNotifyFrame) {
////                }
//            }
//            for (Comment comment : newResponseSet) {
//                NotifyPanel notify = new NotifyPanel(comment, plurkPool);
//                notify.updateWidth(NotificationManager.NotifyWidth);
////                notify.setPlurker(plurker);
////                if (displayTinyWindow) {
////                    notifyManager.addToTinyWindow(notify);
////                }
////                if (displayNotifyFrame) {
////                }
//            }
//        }
//    }
}
