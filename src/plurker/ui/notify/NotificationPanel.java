/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package plurker.ui.notify;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JWindow;
import javax.swing.Timer;

/**
 *
 * @author SkyforceShen
 */
public class NotificationPanel extends javax.swing.JPanel {

    private NotificationWindow window;

    public JWindow getJWindow() {
        if (null == window) {
            window = new NotificationWindow(this);
            window.setSize(this.getSize());
        }
        return window;
    }
    public static int DisappearWaitTime = 10000;
    public static int DisappearLongWaitTime = 15000;

    public static void main(String[] args) {
        JLabel label = new JLabel("123");
        NotificationPanel panel = new NotificationPanel(label, 300);
        JWindow jWindow = panel.getJWindow();
//        jWindow.setBounds(0, 0, 100, 100);
        jWindow.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e) {
                System.out.println(e);
            }
        });


        jWindow.setVisible(true);
    }

    class NotificationWindow extends JWindow implements ActionListener {

        Timer dispearTimer;

        NotificationWindow(NotificationPanel panel) {
            getContentPane().add(panel);
            dispearTimer = new Timer(DisappearWaitTime, this);
            dispearTimer.start();
            panel.getjButton_Close().addActionListener(this);
            this.addMouseMotionListener(new NotifyMouseMotionListener());
//            this.addMouseListener(new NotifyMouseListener(this));

        }

        @Override
        public void actionPerformed(ActionEvent e) {

            removeAll();
            setVisible(false);
            if (null != dispearTimer) {
                dispearTimer.stop();
                dispearTimer = null;
            }
//            dispose();
        }

        class NotifyMouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(MouseEvent e) {
                if (null != dispearTimer) {
                    dispearTimer.setDelay(DisappearLongWaitTime);
                    dispearTimer.setInitialDelay(DisappearLongWaitTime);
                    dispearTimer.restart();
                }
//                if (null != dispearTimer) {
//                    dispearTimer.stop();
//                    dispearTimer = null;
//                }
            }
        }

        class NotifyMouseListener extends MouseAdapter {

            NotificationWindow parent;

            NotifyMouseListener(NotificationWindow parent) {
                this.parent = parent;
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (parent == e.getSource() && null == parent.dispearTimer) {
                    System.out.println("go exit");
                    dispearTimer = new Timer(DisappearWaitTime, parent);
                    dispearTimer.start();
                }
            }
        }
    }

    /**
     * Creates new form NotificationPanel
     */
    public NotificationPanel(JComponent component, int width) {
        initComponents();
        int contentHeight = getContentHeight(component, width);
        Dimension dimension = new Dimension(width, contentHeight);
        component.setSize(dimension);
        component.setPreferredSize(dimension);
        this.setSize(dimension);
        this.setPreferredSize(dimension);

        this.add(component, java.awt.BorderLayout.CENTER);
    }

    private NotificationPanel(JComponent component) {
        initComponents();
        this.add(component, java.awt.BorderLayout.CENTER);
    }

    private static int getContentHeight(JComponent component, int width) {
//        return 30;
        NotificationPanel tmppanel = new NotificationPanel(component);
        tmppanel.setSize(width, Short.MAX_VALUE);
        return tmppanel.getPreferredSize().height;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton_Close = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.BorderLayout());

        jButton_Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plurker/ui/notify/dialog_close.png"))); // NOI18N
        jButton_Close.setBorder(null);
        jButton_Close.setName(""); // NOI18N
        jButton_Close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/plurker/ui/notify/dialog_cancel.png"))); // NOI18N
        jPanel1.add(jButton_Close);

        add(jPanel1, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Close;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public JButton getjButton_Close() {
        return jButton_Close;
    }
}
